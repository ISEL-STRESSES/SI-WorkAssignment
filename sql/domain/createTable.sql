BEGIN TRANSACTION;
-- Constants 
-- Global 
DECLARE nome_max_size CONSTANT INT := 50;
DECLARE status_max_size CONSTANT INT := 20;

-- Jogador
DECLARE email_max_size CONSTANT INT := 254;
DECLARE username_max_size CONSTANT INT := 50;
DECLARE init_status_value CONSTANT VARCHAR(status_max_size) := 'Inativo';

-- Partida Multijogador
DECLARE init_status_partida_multijogador CONSTANT VARCHAR(status_max_size) := 'Por iniciar';

-- Create domain
CREATE DOMAIN ALPHANUM AS VARCHAR(10) CHECK (VALUE ~* '^[A-Z0-9]+$'); 
-- CREATE DOMAIN INT4RANGE AS INT CHECK (VALUE >= 1 AND VALUE <= 5);
CREATE DOMAIN URL AS VARCHAR(255) CHECK (VALUE ~* '^(http|https)://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(/\S*)?$');
CREATE DOMAIN EMAIL AS VARCHAR(email_max_size) CHECK (VALUE ~* '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$');

-- Create table
-- RegiÃ£o
CREATE TABLE IF NOT EXISTS regiao (
    nome        VARCHAR(nome_max_size) NOT NULL,
    
    CONSTRAINT pk_regiao PRIMARY KEY (nome),
);

-- Jogador
CREATE TABLE IF NOT EXISTS jogador (
    id          INT GENARATED BY DEFAULT AS IDENTITY,
    username    VARCHAR(username_max_size) NOT NULL,
    email       EMAIL NOT NULL,
    status      VARCHAR(status_max_size) DEFAULT init_status_value,
    nome_regiao VARCHAR(nome_max_size) NOT NULL,

    UNIQUE (username),
    UNIQUE (email),
    UNIQUE (username, email),

    CONSTRAINT status_jogador CHECK (status in ('Ativo', 'Inativo' ou 'Banido')),
    
    CONSTRAINT pk_jogador PRIMARY KEY (id),
    CONSTRAINT fk_jogador_regiao FOREIGN KEY (nome_regiao) REFERENCES regiao(nome),
);

-- Jogo
CREATE TABLE IF NOT EXISTS jogo (
    id          ALPHANUM,
    nome        VARCHAR(nome_max_size) NOT NULL,
    url         URL NOT NULL,

    UNIQUE (nome),

    CONSTRAINT pk_jogo PRIMARY KEY (id),
);

-- Conversa
CREATE TABLE IF NOT EXISTS conversa (
    id          INT GENERATED BY DEFAULT AS IDENTITY,
    nome        VARCHAR(nome_max_size) NOT NULL,

    CONSTRAINT pk_conversa PRIMARY KEY (id),
);

-- Jogador Estatistica
CREATE TABLE IF NOT EXISTS jogador_estatistica (
    id_jogador      INT NOT NULL,
    nr_partidas     INT DEFAULT 0,
    nr_jogos        INT DEFAULT 0,
    total_pontos    INT DEFAULT 0,

    CONSTRAINT fk_jogador_estatistica FOREIGN KEY (id_jogador) REFERENCES jogador(id),
);

-- Jogo Estatistica
CREATE TABLE IF NOT EXISTS jogo_estatistica (
    id_jogo         ALPHANUM ,
    nr_partidas     INT DEFAULT 0,
    nr_jogadores    INT DEFAULT 0,
    total_pontos    INT DEFAULT 0,

    CONSTRAINT fk_jogo_estatistica FOREIGN KEY (id_jogo) REFERENCES jogo(id),
);

-- Partida
CREATE TABLE IF NOT EXISTS partida (
    nr              SERIAL,
    data_inicio     DATE NOT NULL,
    data_fim        DATE NOT NULL,
    id_jogo         ALPHANUM NOT NULL REFERENCES jogo(id),
    nome_regiao     VARCHAR(nome_max_size) NOT NULL REFERENCES regiao(nome),

    CONSTRAINT date_constraint CHECK (data_inicio < data_fim),
    
    CONSTRAINT pk_partida PRIMARY KEY (nr),
    CONSTRAINT fk_partida_jogo FOREIGN KEY (id_jogo, nome_regiao),
);

-- Partida normal
CREATE TABLE IF NOT EXISTS partida_normal (
    dificuldade     INT NOT NULL,
    pontuacao       INT NOT NULL,
    nr_partida      int REFERENCES partida(nr),

    CONSTRAINT dificuldade_constraint CHECK (dificuldade in (1..5)),
    
    CONSTRAINT pk_partida_normal PRIMARY KEY (nr_partida),
);

-- Partida multijogador
CREATE TABLE IF NOT EXISTS partida_multijogador (
    estado      VARCHAR(status_max_size) DEFAULT init_status_partida_multijogador,
    pontuacao   INT NOT NULL,
    nr_partida  int REFERENCES partida(nr),

    CONSTRAINT estado_constraint CHECK (estado in ('Por iniciar', 'A aguardar jogadores', 'Em curso', 'Terminada')),
    
    CONSTRAINT pk_partida_multijogador PRIMARY KEY (nr_partida),
);

-- Cracha
CREATE TABLE IF NOT EXISTS cracha (
    nome            VARCHAR(nome_max_size) NOT NULL,
    imagem          URL NOT NULL,
    limite_pontos   INT NOT NULL,
    id_jogo         ALPHANUM NOT NULL REFERENCES jogo(id),

    UNIQUE (nome),

    CONSTRAINT pk_cracha PRIMARY KEY (nome),
    CONSTRAINT fk_cracha FOREIGN KEY (id_jogo),

);

-- Mensagem
CREATE TABLE IF NOT EXISTS mensagem (
    nr_ordem  INT NOT NULL,
    texto     TEXT NOT NULL,
    data      DATE NOT NULL,
    id_jogador INT NOT NULL REFERENCES jogador(id),
    id_conversa INT NOT NULL REFERENCES conversa(id),

    CONSTRAINT pk_mensagem PRIMARY KEY (nr_ordem),
    CONSTRAINT fk_mensagem FOREIGN KEY (id_jogador, id_conversa),
);

-- Compra (Jogador - Jogo)
CREATE TABLE IF NOT EXISTS compra (
    data        DATE NOT NULL,
    preco       MONEY DEFAULT 0 NOT NULL,
    id_jogador  INT NOT NULL REFERENCES jogador(id),
    id_jogo    ALPHANUM NOT NULL REFERENCES jogo(id),

    CONSTRAINT fk_compra FOREIGN KEY (id_jogador, id_jogo),
    CONSTRAINT pk_compra PRIMARY KEY (id_jogador, id_jogo),

);

-- Joga (Jogador - Partida)
CREATE TABLE IF NOT EXISTS joga (
    id_jogador  INT NOT NULL REFERENCES jogador(id),
    nr_partida  INT NOT NULL REFERENCES partida(nr),

    CONSTRAINT pk_joga PRIMARY KEY (id_jogador, nr_partida),
    CONSTRAINT fk_joga FOREIGN KEY (id_jogador, nr_partida),
);

-- Ganha (Jogador - Cracha)
CREATE TABLE IF NOT EXISTS ganha (
    id_jogador  INT NOT NULL REFERENCES jogador(id),
    nome_cracha VARCHAR(nome_max_size) NOT NULL REFERENCES cracha(nome),

    CONSTRAINT pk_ganha PRIMARY KEY (id_jogador, nome_cracha),
    CONSTRAINT fk_ganha FOREIGN KEY (id_jogador, nome_cracha),
);

-- Participa (Jogador - Conversa)
CREATE TABLE IF NOT EXISTS participa (
    id_jogador  INT NOT NULL REFERENCES jogador(id),
    id_conversa INT NOT NULL REFERENCES conversa(id),

    CONSTRAINT pk_participa PRIMARY KEY (id_jogador, id_conversa),
    CONSTRAINT fk_participa FOREIGN KEY (id_jogador, id_conversa),
);

-- Amigo
CREATE TABLE IF NOT EXISTS amigo (
    id_jogador1 INT NOT NULL REFERENCES jogador(id),
    id_jogador2 INT NOT NULL REFERENCES jogador(id),

    CONSTRAINT pk_amigo PRIMARY KEY (id_jogador1, id_jogador2),
    CONSTRAINT fk_amigo FOREIGN KEY (id_jogador1, id_jogador2),
);

COMMIT;
